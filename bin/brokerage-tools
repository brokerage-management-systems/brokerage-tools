#!/usr/bin/env ruby

# includes ....................................................................
%w{rubygems optparse ostruct brokerage_tools/app brokerage_tools/version}.each { |lib| require lib }

# Thanks! http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/195810
class Hash
  def self.to_ostructs(obj, memo={})
    return obj unless obj.is_a? Hash
    os = memo[obj] = OpenStruct.new
    obj.each { |k,v| os.send("#{k}=", memo[v] || to_ostructs(v, memo)) }
    os
  end
end

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

help = <<HELP
Brokerage Tools is a report parsing tool.

Basic Command Line Usage:
  brokerage-tools [OPTIONS]

Options:
HELP

# Wheres the config directory?
if File.directory? File.join(Dir.pwd, 'config')
  config_directory = File.join(Dir.pwd, 'config')
else
  config_directory = File.join(Dir.pwd)
end

$options = OpenStruct.new
$options.app_conf    = File.join(config_directory, 'application.yml')
$options.db_conf     = File.join(config_directory, 'database.yml')
$options.mailer_conf = File.join(config_directory, 'email.yml')

opts = OptionParser.new do |opts|
  opts.banner = help

  opts.on('-a', '--appconfig [FILE]', 'Application configuration file [Optional], defaults to application.yml') do |file|
    $options.app_conf = file
  end

  opts.on('-d', '--dbconfig [FILE]', 'Database configuration file [Optional], defaults to database.yml') do |file|
    $options.db_conf = file
  end

  opts.on('-e', '--emailconfig [FILE]', 'Email server configuration file [Optional], defaults to email.yml') do |file|
    $options.mailer_conf = file
  end

  opts.on('-p', '--parse TYPE', [:bbc702z, :bbc710z, :bbc720z, :bbc810z, :bcr973gv, :fbnr074p, :msirecord, :trdrevtd], 'Report types to parse: (bbc702z, bbc710z, bbc720z, bbc810z, bcr973gv, fbnr074p, msirecord, trdrevtd)') do |type|
    $options.parser_type = type
  end

  opts.on('-v', '--validate TYPE', [:trdrevtd], 'Validation type: (trdrevtd)') do |type|
    $options.validation_type = type
  end

  opts.on('--email-errors-to EMAIL_ADDRESS', 'Email errors to specified email address.') do |email_address|
    $options.email_errors_to = email_address
  end

  opts.on('--email-validation-to EMAIL_ADDRESS', 'Email the validation to specified email address.') do |email_address|
    $options.email_validation_to = email_address
  end

  opts.on('--include-zips', 'Includes any zip files in the directory in parse process.') do
    $options.zips = true
  end

  opts.on('--no-backup', 'Disables report file backup.') do
    $options.backup = false
  end

  opts.on('--no-records', 'Disables writing report records to the database.') do
    $options.records = false
  end

  opts.on('--with-commission-month [Month]', 'Example \'December 2012\'.') do |commission_month|
    $options.commission_month = commission_month
  end

  opts.on('--with-entity-id [Entity ID]', 'Example \'000\'.') do |entity_id|
    $options.entity_id = entity_id
  end

  # TODO: May not be necessary any longer, check and remove or implement
  opts.on('--no-trailer', 'Disables writing report trailer to the database.') do
    $options.trailer = false
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit 0
  end

  opts.on_tail('--version', 'Display current version.') do
    puts "Brokerage Tools: " + BrokerageTools::VERSION
    exit 0
  end
end

# Read command line options into `options` hash
begin
  opts.parse!
rescue OptionParser::InvalidOption
  puts "brokerage-tools: #{$!.message}"
  puts "brokerage-tools: try 'brokerage-tools --help' for more information"
  exit
end

# report parsing not yet implemented for the following reports so quit.
case $options.parser_type
when :bbc702z, :bbc720z, :bbc810z
  puts "report: #{$options.parse_type} is not yet implemented."
  exit 1
end

# Quit if you dont have the necessary conf files
unless File.file? $options.app_conf
  puts "File does not exist: #{$options.app_conf}"
  exit
end

unless File.file? $options.db_conf
  puts "File does not exist: #{$options.db_conf}"
  exit
end

unless File.file? $options.mailer_conf
  puts "File does not exist: #{$options.mailer_conf}"
  exit
end

# At this point we should have what we need to run!
BrokerageTools::App.run
